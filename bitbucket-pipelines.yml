image: bemiteu/webbuild:latest

#
# Defaults

options:
  max-time: 10

clone:
  depth: 1

#
## Reusable Steps, define only one step per var (thus no hyphen)

build: &build
  step:
    name: Build
    caches:
      - node
    script:
      #- rsync -av --exclude='.git' --exclude='node_modules' . ../build_tmp && mv ../build_tmp ./build
      - rm -rf node_modules/*
      # check against: is currently the package.json for developing or production existing
      # when package-prod exists it means package.json is package-dev.json, if package-dev.json exists it means package.json is package-prod.json
      - if [ ! -f ./package-dev.json ]; then echo "Installing Developer Packages"; git submodule update --init --recursive; else echo "Installing Production Packages"; fi
      # install dep
      - npm install
      - git clone https://bitbucket.org/bemit_eu/formanta.module.react-app ../react-app
      - cd ../react-app && yarn install && cd ../build
      # build and archive
      - npm run build
      # move transpiled files
      - mv ../build_tmp ./build
      # archive all
      - npm run archive
      #- mv ../archive .
    artifacts:
      - build/**
      - archive/**

test: &test
  step:
    name: Test
    caches:
      - node
    script:
      - npm run check-ci
    artifacts:
      - test-reports/**

testVersion: &testVersion
  step:
    name: Test Last Prod and Dev
    script:
      # react-app dependency is the same
      - git clone https://bitbucket.org/bemit_eu/formanta.module.react-app ../react-app
      - cd ../react-app && yarn install && cd ../build
      # clean
      - rm -rf node_modules/*
      - rm -rf package-lock.json
      # check against: dev
      - if [ ! -f ./package-dev.json ]; then echo "Switch To Developer Packages"; mv package.json package-prod.json; mv package-dev.json package.json; fi
      - git submodule update --init --recursive;
      ## build
      - npm install
      - npm run build
      - npm run archive
      # clean
      - rm -rf node_modules/*
      - rm -rf package-lock.json
      # check against: prod
      - if [ ! -f ./package-prod.json ]; then echo "Switch To Prod Packages"; mv package.json package-dev.json; mv package-prod.json package.json; fi
      - git submodule update --init --recursive;
      ## build
      - npm install
      - npm run build
      - npm run archive
    artifacts:
      - archive/**

publish: &publish
  step:
    name: Publish
    script:
      - rm -rf build/**
      - rm -rf test-reports/**
      - npmPublish.sh

artifactSave: &artifactSave
  step:
    name: Artifact Save
    script:
      - zip -r build.zip ./build
      - saveDownloadBranch.sh build.zip
    artifacts:
      - build.zip

artifactSaveTag: &artifactSaveTag
  step:
    name: Artifact Save
    script:
      - zip -r build.zip ./build
      - saveDownloadTag.sh build.zip
    artifacts:
      - build.zip

#
## Actual Pipeline

pipelines:
  custom:
    testVersion:
      - <<: *testVersion
  default:
    - <<: *build
    - <<: *test
  branches:
    master:
      - <<: *build
      - <<: *test
      - <<: *artifactSave
    develop:
      - <<: *build
      - <<: *test
      - <<: *artifactSave
    feature/*:
      - <<: *build
      - <<: *test
